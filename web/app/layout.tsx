import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { cookies, headers } from "next/headers";
import { Toaster } from "sonner";
import IsAuth from "./Auth/IsAuth/IsAuth";
import SetToken, { getClientIP } from "./Auth/IsAuth/SetToken";
import Script from "next/script";
import Providers from "./providers";
import SocketIO from "./Socket/SocketIO";
import { EncryptCombine } from "./Auth/Lock/Combine";
import db from "./Database/Supabase/Base1";
import ProgressB from "./Home/ProgressB/ProgressB";
// 
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
  display: 'swap',
  preload: true,
  fallback: ['system-ui', 'sans-serif']
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
  display: 'swap',
  preload: true,
  fallback: ['monospace']
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

interface TrendingEvents {
  event_id: string;
  title: string;
  date: string;
  participants: number;
}

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  let h = await headers()
  let usr: any = await IsAuth(true);
  let sign_inToken;
  let token;
  let theme: any = usr ? (usr?.theme || `system`) : `system`;
  let trending_events: TrendingEvents[] = [];
  let team_members: any[] = [];

  // Get trending events
  const { data: events, error } = await db
  .from('events')
  .select(`
    event_id,
    title,
    date,
    status,
    likes,
    comments,
    views,
    shares
  `)
  .or('privacy.is.null,privacy.neq.private')
  .order('likes', { ascending: false })
  .order('comments', { ascending: false })
  .limit(4);

  const { data: teamMembers, error: er } = await db
  .from('team_members')
  .select(`
    description,
    user_id,
    name,
    role,
    socialLinks,
    expertise,
    users:user_id (
      firstname,
      lastname,
      profile
    )
  `, { count: 'exact' })
  .order('created_at', { ascending: false })
  .limit(4);

  if(!er && teamMembers) {
    team_members = teamMembers;
  }

  if (!error && events) {
    trending_events = await Promise.all(events.map(async (event) => {
      const { count, error: countError } = await db
        .from('event_participants')
        .select('count', { count: 'exact' })
        .eq('event_id', event.event_id);
      
      return {
        event_id: event.event_id,
        title: event.title,
        date: event.date,
        participants: countError || count === null ? 0 : count,
        status: event.status,
        likes: event.likes,
        comments: event.comments,
        views: event.views,
        shares: event.shares
      };
    }));
    
  }


  if (usr) {
    let k: string[] = [`${process.env.PASS1}`, `${process.env.TOKEN2}`];
    sign_inToken = await SetToken({
      expiresIn: '1h',
      algorithm: 'HS512'
    }, k);
    let sockK = [`${process.env.SOCKET_TOKEN}`, `${process.env.SOCKET_TOKEN2}`];
    let BD = {
      'user_id': usr.user_id,
      'ua': h.get('user-agent')?.split(/\s+/).join(''),
      'ip': await getClientIP(h)
    }
    token = EncryptCombine(JSON.stringify(BD), sockK, {
      expiresIn: '1h',
      algorithm: 'HS512'
    });

    
    // 
    delete usr?.id
  }
  
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} ${theme} antialiased overflow-x-hidden`}>
        <Providers>
          {children}
          <Toaster closeButton duration={20000} richColors position={`bottom-center`} theme={theme} />
        </Providers>
        {(usr && sign_inToken && token) && (
          <>
            <script>
              {`
                window.addEventListener('load', () => {
                  window.document.cookie = 'session=${sign_inToken};path=/;';
                })
              `}
            </script>
            <script>
              {
                `
                    window._profile = ${JSON.stringify(usr)}
                    `
                  }
            </script>
            {/* <SocketIO token={`${token}`}/> */}
          </>
        )}
        <script>
          {
            `
            window._trending_events = ${JSON.stringify(trending_events)}
            window._team_members = ${JSON.stringify(team_members)}
            `
          }
        </script>
        
        <ProgressB/>

      </body>
    </html>
  );
}
